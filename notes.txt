Allow loading .obj geometry onto a body.
---
How would we generalize this to have multiple solving passes?
* It seems like we are effectively setting up multiple solve tags.
  Maybe each solver has a solve tag associated with it.  Each value
  can be tagged with any of the solve tags.
  * Potentially a value could have a number of tags and a solver could
    have a number of tags and the values that get solved are the ones
    where there are matching tags.
  * Potentially an error could also have a tag, maybe a different set of tags.
* We may want to have local solvers.
  * For example, if we are trying to make rays point in the right direction,
    we could have a local solver for each ray which makes the ray point
    in the right direction relative to the camera, and then we have a
    solver for each camera which makes the camera translate and rotate
    to match rays in 3D, then we have another solver which tries to
    make 3D points which match the rays. The camera solver and the point
    solver could be combined into a larger solver which solves both.
---
Instead of having different kinds of errors, we could just be able to put
an error on various values.

Distance {
  start_marker: "marker1"
  end_marker: "marker2"
  value: 2.3 {
    error: 5 {
      desired_value: 7.3
      weight: 1
    }
  }
}

Body {
  translation: [] {
    x: 3 {
      error: 1 {
        desired_value: 2
        weight: 1
      }
    }
  }
---
It might be nice to treat a handle on a marker as setting temporary
desired values and solving rather than setting the values directly.
* This would allow for us moving markers which are driven by expressions.
* It would end up solving variables and moving the marker to the closest
  position that was supported by the variables.

One thing that seems missing is the ability to specify an expression for
the position of a marker which depends on the marker position's components.
We'd want to have an expression like: [x*scale, y*scale, z*scale].  When
setting the marker position, we could calculate the component values.
We would try to calculate scale.

For this to work, it seems like we should make a distinction between linear
and non-linear solving.  If the expression that drives a marker position
is linear, then we can invert the expression and calculate the position
directly.  Maybe initially, we would only support linear expressions, and
add support for non-linear expressions later.
---
I'd like to be able to support 3D curves.  It would be possible to draw
a curve by using line segments.

LineStrip {
  Vertex {
    x: 0
    y: 0
    z: 0
  }
  Vertex {
    x: 1
    y: 1
    z: 1
  }
}


LineStrip {
  ForEach {
    variable: "i"
    values: {
      0
      1
    }
    Vertex {
      x : i
      y : i
      z : i
    }
  }
}


LineStrip {
  ForEach {
    variable: "i"
    values {
      0
      1
    }
    Vertex {
      x : 0 {
        expression: "xCurve(i)"
      }
      y : 0 {
        expression: "yCurve(i)"
      }
      z : 0 {
        expression: "zCurve(i)"
      }
    }
  }
}


BSpline3D {
  name: "bspline"
  Piece {
    knot: 0
    control_point: {
      x: 0
      y: 0
      z: 0
    }
  }
  Piece {
    knot: 1
    control_point {
      x: 1
      y: 1
      z: 1
    }
  }
}

BSplineMarker {
  name: "marker3"
  bspline: "bspline"
  parameter: 0
}

Marker {
  name: "marker3"
  position: {
    expression: "bspline(t)"
    t: 5
  }
}


Function {
  name: "BSpline"
  Child {
    name: "Piece"
    Param {
      name: "knot"
      type: Real
    }
    Param {
      name: "control_point"
      type: Point
    }
  }
  Define {
    name: "pieces"
    value: Children(type=Piece)
  }
  LineStrip {
    ForEach {
      variable: "i"
      values: Range {
        start: 0
        count: n_segments
      }
      Define {
        name: "fraction"
        value: "i/n_segments"
      }
      Define {
        name: "x"
        value: "lerp(first_knot, last_knot, fraction)"
      }
    }
  }
}
---
When we have live values, it makes sense to have something that shows the
current value, but inside a function, there's no such thing as the live
value.
* Perhaps if we think of partial evaluation it could work.  The live value
  of a value inside a function is the partial evaluation.  So we can have

Function {
  name: "f"
  Param {
    name: "x"
    type: Real
  }
  Result: x*2 + 15 {
    expression: "x*2 + (5*3)"
  }
}
---
We need to make it where we don't do a general update of the the scene
state from the scene because there are ambiguities.  We should only be
updating the scene state from manipulators.
---
Let's say that the base state of our scene is represented as a graph.
We then have functions that map this graph to other derived graphs.
If we apply a graph rewriting operation to the base graph, we'd like
to find the graph rewriting operation for the derived graphs, so that
instead of recomputing the derived graphs, we can rewrite them.

One approach seems to be to annotate the derived graphs, such that nodes
in the derived graph have annotations which relate back to the original
graph.  If we do a graph rewriting operation, we can then map from the
old base graph to the new base graph, and map the resulting derived
annotations back to new derived annotations.  We can then use this to
find a graph rewriting which transforms the old derived graph to the
new one.

It seems like we can use this approach to simplify how we maintain our
tree and scene.  We can define a function which maps an annotated
scene state to an annotated tree.  When we perform a graph rewriting
on the scene state graph, we map old base annotations to new base annotations,
then use these to map annotations in the tree graph.  We map the annotations
on the tree to new annotations using the base annotation mapping.

Node Creation:
  A new base node is created.  The base-to-derived mapping is used to
  make a set of derived node annotations.  New nodes are created in the derived
  graph with these annotations.

Node Deletion:
  A base node is deleted.  The base-to-derived mapping is used to
  make a set of derived node annotations.  The corresponding nodes in the
  derived graph are deleted.

Arc Creation:
  A new base arc is created.  The base-to-derived mapping is used to
  make a set of derived arcs.  New arcs are created in the derived graph
  with these annotations.

Arc Deletion:
  A base arc is deleted.  A base-to-derived mapping is used to
  make a set of derived node annotations.  The corresponding arcs in the
  derived graph are deleted.

Node renaming.
  A mapping from old base graph annotations to new base graph annotations
  is created.  For each node, the base-to-derived mapping is used to
  create old derived annotations.  The old derived annotations are mapped
  to new derived annotations by similarity.

Lets take the example of inserting a new child.  We start with this base
graph:

parent:
  child1
  child2

We insert a new child between child1 and child2.  This involves five
operations.
1) Deleting the arc between child1 and child2
2) Renaming child2 to child3
3) Creating child2
4) Creating an arc between child1 and child2
5) Creating an arc between child2 and child3

Let's say we have a derived graph:

t-parent:
  t-child1
  t-child2

1) Deleting the arc between child1 and child2
  * We map the child1-child2 arc to the t-child1-t-child2 arc.
  * We delete the t-child1-t-child2 arc in the derived graph.

2) Renaming child2 to child3
  * We map child2 to t-child2
  * We map child3 to t-child3
  * We match t-child2 to t-child3 through a t-* unification
  * We rename t-child2 to t-child3 in the derived graph.

3) Creating child2
  * We map child2 to t-child2
  * We create a t-child2 node.
  
4) Creating an arc between child1 and child2
  * We map the child1-child2 arc to t-child1-t-child2.
  * We create a t-child1-t-child2 arc in the derived graph.
  *
5) Creating an arc between child2 and child3
  * We map the child2-child3 arc to t-child2-t-child3.
  * We create a t-child2-t-child3 arc in the derived graph.

So it seems like this really comes down to
  1) Being able to map base nodes to derived nodes.
  2) Being able to map base arcs to derived arcs.
  3) Being able to map changes in base annotations to changes in derived
     annotations.

One additional aspect is that we will need to be able to relate these
base operations to the actual operations.  For our tree, all we can do
is insert and delete.  Changing an insert operation in the base graph
to the 5 elementry operations is straightforward.  Changing the
elemetry operations on the derived graph to the actual operations on
the derived graph may not be.

It seems important to represent our operations in terms of mappings.
Being able to map a node in our scene state to a node in our tree should
be a basic operation.  This means it is important to define have a way to
use these operations simply.

tree_node = treeMap(state_node)

this treeMap could potentially have other operations, like mapping
an insertion.

For example:
  stateToTreeMap(insert(state_node))
    -> { insert(tree_node1), insert(tree_node2) }

In C++, we might do this using a visitor:
  stateToTreeMap.mapInsert(state_node, handler)

  calls

  handler.insert(tree_node1)
  handler.insert(tree_node2)

The map would need to be bi-directional.  For example, we would need to
be able to map a delete operation on a tree node to a delete operation
on the state node.
