---
Allow loading .obj geometry onto a body.
---
Have rays.

Class {
  name: "Ray"
  Param {
    name: "origin"
    type: Point
  }
  Param {
    name: "direction"
    type: Vector
  }
  Line {
    start: origin
    end: origin + direction*1000
  }
}
Class {
  name: "PointOnRay"
  Param {
    name: "ray"
    type: Ray
  }
  Param {
    name: "step"
    type: Float
  }
  ray.origin + ray.direction*step
}

Should we have markers as children of rays?

A ray could just be geometry.  It could be an infinite line along the X
axis starting at (0,0,0).  We could change the ray origin and direction
using a body.

Maybe we have a list of rays on a body.

A body can be thought of as three rays with a common origin.

We could have body markers and ray markers, where a ray marker just has
a step value.
---
How would we generalize this to have multiple solving passes?
* It seems like we are effectively setting up multiple solve tags.
  Maybe each solver has a solve tag associated with it.  Each value
  can be tagged with any of the solve tags.
  * Potentially a value could have a number of tags and a solver could
    have a number of tags and the values that get solved are the ones
    where there are matching tags.
  * Potentially an error could also have a tag, maybe a different set of tags.
* We may want to have local solvers.
  * For example, if we are trying to make rays point in the right direction,
    we could have a local solver for each ray which makes the ray point
    in the right direction relative to the camera, and then we have a
    solver for each camera which makes the camera translate and rotate
    to match rays in 3D, then we have another solver which tries to
    make 3D points which match the rays. The camera solver and the point
    solver could be combined into a larger solver which solves both.
---
Instead of having different kinds of errors, we could just be able to put
an error on various values.

Distance {
  start_marker: "marker1"
  end_marker: "marker2"
  value: 2.3 {
    error: 5 {
      desired_value: 7.3
      weight: 1
    }
  }
}

Body {
  translation: [] {
    x: 3 {
      error: 1 {
        desired_value: 2
        weight: 1
      }
    }
  }
---
A nice visual representation of error is a line to the closest point.  If
we have an X error, then a line to the point with the minimum y and z values
would be a good representation of that error.
---
If we're changing the value of a variable and that variable is being used
in an expression for a body transform (i.e. x translation), and that transform
is being solved, the behavior is surprising.  When you change the variable, the
body doesn't move because the scene is re-solved.  Seems like we have a few
options.
* Be smarter about how we re-solve the scene.
  * Temporarily disable the solving for any channel that is affected by
    the variable that is being changed.
* Automatically disable the solve flag when we change a channel to use an
  expression.
  * Maybe the solve flag is still sensitive, so we can turn it back on if we
    want.
  * This may be a better behavior in general.  Even if we just change the value
    of the channel by typing in a number or using the arrows on the spin box,
    we could disable the solve.  The user coule re-enable it whenever they
    want.
