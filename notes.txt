---
Allow adding distance errors to bodies.
* This will mean removing/adding distance errors to the tree when we
  remove or add bodies.
* This will make it more natural to think of a body, its markers, and
  its distance errors as a single unit.
---
Allow loading .obj geometry onto a body.
---
Have rays.

Class {
  name: "Ray"
  Param {
    name: "origin"
    type: Point
  }
  Param {
    name: "direction"
    type: Vector
  }
  Line {
    start: origin
    end: origin + direction*1000
  }
}
Class {
  name: "PointOnRay"
  Param {
    name: "ray"
    type: Ray
  }
  Param {
    name: "step"
    type: Float
  }
  ray.origin + ray.direction*step
}

Should we have markers as children of rays?

A ray could just be geometry.  It could be an infinite line along the X
axis starting at (0,0,0).  We could change the ray origin and direction
using a body.

Seems like we want to be able to add and remove geometry, so generalizing
the geometry so that we can have a list of geometry objects on a
body seems best.

Maybe we have a list of boxes and a list of rays on a body.
---
We need to generalize the scene so that there can be multiple geometry objects.
It seems like we need to work towards have
createBox(), createSphere(), and createLine() so that they return new
kinds of handles, and there is no implicit body.
---
If we delete the box, we still want to be able to select the transform
so we can translate and rotate it.
---
In the SelectionHandler, we use _translate_dragger_geode_ptr, but this
is no longer appropriate, since we can translate transforms.  In fact,
it seems like we are always translating transforms.

If we want a translate handle for a body, we need to select the body transform
and place the handle on that.
---
If we're going to be able to remove the box, then the handle for a body
has to be a TransformHandle and not a BoxAndTransformHandle.
