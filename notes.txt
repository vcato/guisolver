---
Allow loading .obj geometry onto a body.
---
Have rays.

Class {
  name: "Ray"
  Param {
    name: "origin"
    type: Point
  }
  Param {
    name: "direction"
    type: Vector
  }
  Line {
    start: origin
    end: origin + direction*1000
  }
}
Class {
  name: "PointOnRay"
  Param {
    name: "ray"
    type: Ray
  }
  Param {
    name: "step"
    type: Float
  }
  ray.origin + ray.direction*step
}

Should we have markers as children of rays?

A ray could just be geometry.  It could be an infinite line along the X
axis starting at (0,0,0).  We could change the ray origin and direction
using a body.

Maybe we have a list of rays on a body.

A body can be thought of as three rays with a common origin.

We could have body markers and ray markers, where a ray marker just has
a step value.
---
How would we generalize this to have multiple solving passes?
* It seems like we are effectively setting up multiple solve tags.
  Maybe each solver has a solve tag associated with it.  Each value
  can be tagged with any of the solve tags.
  * Potentially a value could have a number of tags and a solver could
    have a number of tags and the values that get solved are the ones
    where there are matching tags.
  * Potentially an error could also have a tag, maybe a different set of tags.
* We may want to have local solvers.
  * For example, if we are trying to make rays point in the right direction,
    we could have a local solver for each ray which makes the ray point
    in the right direction relative to the camera, and then we have a
    solver for each camera which makes the camera translate and rotate
    to match rays in 3D, then we have another solver which tries to
    make 3D points which match the rays. The camera solver and the point
    solver could be combined into a larger solver which solves both.
---
Instead of having different kinds of errors, we could just be able to put
an error on various values.

Distance {
  start_marker: "marker1"
  end_marker: "marker2"
  value: 2.3 {
    error: 5 {
      desired_value: 7.3
      weight: 1
    }
  }
}

Body {
  translation: [] {
    x: 3 {
      error: 1 {
        desired_value: 2
        weight: 1
      }
    }
  }
---
A nice visual representation of error is a line to the closest point.  If
we have an X error, then a line to the point with the minimum y and z values
would be a good representation of that error.
---
Work on evaluating spinbox expressions.
---
Might be good to refactor the evaluateexpression.cpp from
node_editor/charmapper into an expression parser.  It can keep the expression
as a series of nodes, where no values are kept.  Numbers, identifiers,
and string literals are all kept as index ranges into the original string,
so that no extra data structure needs to be introduced to hold the values.
A templated evaluator could be used.

evaluate(expression, evaluator)

struct VisitorInterface {
  virtual void operator()(Expression::Identifier &) = 0;
  virtual void operator()(Expression::Add &) = 0;
};


template <typename Function> 
struct FunctionVisitor : VisitorInterface {
  Optional<Function::Result> maybe_result;
  const Function &f;

  virtual void operator()(Expression::Identifier &arg)
  {
    maybe_result = f(arg);
  }

  virtual void operator()(Expression::Add &arg)
  {
    maybe_result = f(arg);
  }
};


struct Node {
  virtual void accept(VisitorInterface &) = 0;
};


template <typename Function>
struct NodeEvaluator {
  Function::Result evaluate(Node &node)
  {
    FunctionVisitor<Function> visitor(static_cast<Function&>(*this));
    node.accept(visitor);
    return *visitor.maybe_result;
  }
};

struct MyFunction : NodeEvaluator<MyFunction> {
  using NodeEvaluator<MyFunction>::evaluate;
  using Result = MyType;

  MyType operator()(Expression::Identifier &identifier)
  {
    return evaluateIdentifier(string, identifier.begin, identifier.length);
  }

  MyType operator()(Expression::Add &add)
  {
    return evaluate(add.left) + evaluate(add.right);
  }
};
